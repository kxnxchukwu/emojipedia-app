{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kenec\\\\Downloads\\\\emojipedia-app\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\"));\nvar numbers = [3, 56, 2, 48, 5]; ////Map -Create a new array by doing something with each item in an array.\n// const newNumbers = numbers.map(function (x) {\n//   return x * 2;\n// });\n\nvar mapNewNumbers = numbers.map(function (num) {\n  return num * 2;\n});\nconsole.log(mapNewNumbers); //////Filter - Create a new array by keeping the items that return true.\n// const newNumbers = numbers.filter(function(num) {\n//   return num < 10;\n// });\n\nvar filterNewNumbers = numbers.filter(function (num) {\n  return num > 10;\n});\nconsole.log(filterNewNumbers); //Reduce - Accumulate a value by doing something to each item in an array.\n// var newNumber = numbers.reduce(function (accumulator, currentNumber) {\n//     return accumulator + currentNumber;\n// })\n\nvar reduceNewNumbers = numbers.reduce(function (accumulator, currentNumber) {\n  return accumulator + currentNumber;\n});\nconsole.log(reduceNewNumbers); ////Find - find the first item that matches from an array.\n// const newNumber = numbers.find(function (num) {\n//   return num > 10;\n// })\n\nvar findNewNumbers = numbers.find(function (num) {\n  return num > 10;\n});\nconsole.log(findNewNumbers); ////FindIndex - find the index of the first item that matches.\n// const newNumber = numbers.findIndex(function (num) {\n//   return num > 10;\n// })\n\nvar findIndexNewNumbers = numbers.findIndex(function (num) {\n  return num > 10;\n});\nconsole.log(findIndexNewNumbers);","map":{"version":3,"sources":["C:/Users/kenec/Downloads/emojipedia-app/src/index.js"],"names":["React","ReactDOM","App","render","document","getElementById","numbers","mapNewNumbers","map","num","console","log","filterNewNumbers","filter","reduceNewNumbers","reduce","accumulator","currentNumber","findNewNumbers","find","findIndexNewNumbers","findIndex"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AAEAD,QAAQ,CAACE,MAAT,eAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB;AAEA,IAAIC,OAAO,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,EAAX,EAAe,CAAf,CAAd,C,CAEA;AACA;AACA;AACA;;AAEA,IAAMC,aAAa,GAAGD,OAAO,CAACE,GAAR,CAAY,UAACC,GAAD;AAAA,SAASA,GAAG,GAAG,CAAf;AAAA,CAAZ,CAAtB;AAEAC,OAAO,CAACC,GAAR,CAAYJ,aAAZ,E,CAEA;AACA;AACA;AACA;;AAEA,IAAMK,gBAAgB,GAAGN,OAAO,CAACO,MAAR,CAAe,UAACJ,GAAD;AAAA,SAASA,GAAG,GAAG,EAAf;AAAA,CAAf,CAAzB;AAEAC,OAAO,CAACC,GAAR,CAAYC,gBAAZ,E,CAEA;AACA;AACA;AACA;;AAEA,IAAME,gBAAgB,GAAGR,OAAO,CAACS,MAAR,CACvB,UAACC,WAAD,EAAcC,aAAd;AAAA,SAAgCD,WAAW,GAAGC,aAA9C;AAAA,CADuB,CAAzB;AAIAP,OAAO,CAACC,GAAR,CAAYG,gBAAZ,E,CAEA;AACA;AACA;AACA;;AAEA,IAAMI,cAAc,GAAGZ,OAAO,CAACa,IAAR,CAAa,UAACV,GAAD;AAAA,SAASA,GAAG,GAAG,EAAf;AAAA,CAAb,CAAvB;AAEAC,OAAO,CAACC,GAAR,CAAYO,cAAZ,E,CAEA;AACA;AACA;AACA;;AAEA,IAAME,mBAAmB,GAAGd,OAAO,CAACe,SAAR,CAAkB,UAACZ,GAAD;AAAA,SAASA,GAAG,GAAG,EAAf;AAAA,CAAlB,CAA5B;AAEAC,OAAO,CAACC,GAAR,CAAYS,mBAAZ","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nvar numbers = [3, 56, 2, 48, 5];\n\n////Map -Create a new array by doing something with each item in an array.\n// const newNumbers = numbers.map(function (x) {\n//   return x * 2;\n// });\n\nconst mapNewNumbers = numbers.map((num) => num * 2);\n\nconsole.log(mapNewNumbers);\n\n//////Filter - Create a new array by keeping the items that return true.\n// const newNumbers = numbers.filter(function(num) {\n//   return num < 10;\n// });\n\nconst filterNewNumbers = numbers.filter((num) => num > 10);\n\nconsole.log(filterNewNumbers);\n\n//Reduce - Accumulate a value by doing something to each item in an array.\n// var newNumber = numbers.reduce(function (accumulator, currentNumber) {\n//     return accumulator + currentNumber;\n// })\n\nconst reduceNewNumbers = numbers.reduce(\n  (accumulator, currentNumber) => accumulator + currentNumber\n);\n\nconsole.log(reduceNewNumbers);\n\n////Find - find the first item that matches from an array.\n// const newNumber = numbers.find(function (num) {\n//   return num > 10;\n// })\n\nconst findNewNumbers = numbers.find((num) => num > 10);\n\nconsole.log(findNewNumbers);\n\n////FindIndex - find the index of the first item that matches.\n// const newNumber = numbers.findIndex(function (num) {\n//   return num > 10;\n// })\n\nconst findIndexNewNumbers = numbers.findIndex((num) => num > 10);\n\nconsole.log(findIndexNewNumbers);\n"]},"metadata":{},"sourceType":"module"}